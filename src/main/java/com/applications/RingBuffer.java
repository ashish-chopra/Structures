/*
 *  File: RingBuffer.java
 *  Author: Ashish Chopra
 *  Date: 12 July, 2013
 *  --------------------------------------------
 *  RingBuffer is a circular queue data structure used
 *  to buffer data generated by a producer and consumed by 
 *  a consumer in a typical producer-consumer scenario. 
 *  It is a circular queue which increases the utilization of
 *  the data structure with a fixed capacity.
 *  
 */
package com.applications;

import java.util.NoSuchElementException;

/**
 * RingBuffer is a buffer designed to store
 * data of <code>String</code> type, typcally generated by
 * a producer. It supports methods of <code>queue</code> and 
 * internally behaves as a circular queue.
 * 
 * @author Ashish Chopra
 * @version 1.0
 */
public class RingBuffer {

	private int capacity;
	private String[] items;
	private int head, tail;
	
	/**
	 * constructs a RingBuffer object with fixed capacity.
	 * @param N capacity of buffer as <code>int</code>
	 */
	public RingBuffer(int N) {
		if (N <= 0)
			throw new IllegalArgumentException("N has to be a positive integer.");
		capacity = N;
		items = new String[capacity];
		head = tail = 0;
	}
	
	/**
	 * inserts an item into the buffer if there is an 
	 * empty location.
	 * @param data item to be inserted as <code>String</code>
	 */
	public void enqueue(String data) {
		if (data == null)
			throw new IllegalArgumentException("Null items not allowed");
		if (isFull())
			throw new RuntimeException("Buffer is full");
		tail = tail % capacity;
		items[tail++] = data;
	}
	
	/**
	 * removes the least recent item from buffer.
	 * @return item as <code>String</code>
	 */
	public String dequeue() {
		if (isEmpty())
			throw new NoSuchElementException("Buffer is empty");
		String data = items[head];
		items[head++] = null;
		head = head % capacity;
		return data;
	}
	
	/**
	 * checks to see if buffer is empty.
	 * @return <code>true</code> if empty,
	 *         <code>false</code> otherwise.
	 */
	public boolean isEmpty() {
		return size() == 0;
	}
	
	/**
	 * checks to see if buffer is full.
	 * @return <code>true</code> if full,
	 *         <code>false</code> otherwise.
	 */
	public boolean isFull() {
		return size() == capacity;
	}
	
	/**
	 * return the actual size of buffer filled with items.
	 * @return size of buffer as <code>int</code>.
	 */
	public int size() {
		int size = (tail < head) ? (capacity - head) + (tail + 1) : tail - head;
		return size;
	}
}
